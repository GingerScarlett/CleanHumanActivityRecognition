coef(fit2)
round(coef(fit2)[1], 1)
round(coef(fit)[1], 2)
fit3 <- lm(price ~ I(carat * 10), data=diamond)
coef(fit3)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
data("diamond")
data("diamond")
plot(diamond$carat, diamond$price, xlab="Mass (carats)", ylab="Price (SIN $)", bg="lightblue", col="black", cex = 1.1, pch=21, frame = FALSE)
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
data("diamond")
plot(diamond$carat, diamond$price, xlab="Mass (carats)", ylab="Price (SIN $)", bg="lightblue", col="black", cex = 1.1, pch=21, frame = FALSE)
abline(fit, lwd = 2)
points(diamond$carat, predict(fit), pch = 19, col = "red")
lines(c(0.16, 0.16, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.16,
coef(fit)[1] + coef(fit)[2] * 0.16))
lines(c(0.27, 0.27, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.27,
coef(fit)[1] + coef(fit)[2] * 0.27))
lines(c(0.34, 0.34, 0.12),
c(200, coef(fit)[1] + coef(fit)[2] * 0.34,
coef(fit)[1] + coef(fit)[2] * 0.34))
text(newx, rep(250, 3), labels = newx, pos = 2)
g = ggplot(diamond, aes(x=carat, y=price))
g = g+xlab("Mass (carats)")
g = g+ ylab("Price (SIN $)")
g
g = g + geom_point(size=7, colour = "black", alpha=0.2)
g = g + geom_point(size=5, colour = "blue", alpha=0.2)
g
g = g + geom_point(size=6, colour = "black", alpha=0.2)
g = ggplot(diamond, aes(x=carat, y=price))
g = g+xlab("Mass (carats)")
g = g+ ylab("Price (SIN $)")
g = g + geom_point(size=6, colour = "black", alpha=0.2)
g
g = g + geom_point(size=5, colour = "blue", alpha=0.2)
g
g = g + geom_smooth(method="lm", colour="black")
g
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(x, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
g
g = g + geom_hline(yintercept = 0, size = 2);
g
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = g + xlab("X") + ylab("Residual")
g
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
diamond$e <- resid(lm(price ~ carat, data = diamond))
g = ggplot(diamond, aes(x = carat, y = e))
g = g + xlab("Mass (carats)")
g = g + ylab("Residual price (SIN $)")
g = g + geom_hline(yintercept = 0, size = 2)
g
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
head(diamond)
e = c(resid(lm(price ~ 1, data = diamond)),
resid(lm(price ~ carat, data = diamond)))
head (e)
length(e)
length(diamond$carat)
fit = factor(c(rep("Itc", nrow(diamond)),
rep("Itc, slope", nrow(diamond))))
head(fit)
fit[50]
tail(fit)
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
sqrt(sum(resid(fit)^2) / (n - 2))
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
summary(fit)
summary(fit)$sigma
sqrt(sum(resid(fit)^2) / (n-2))
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
R.version.string
install.packages("swirl")
library(swirl)
install_from_swirl("Regressin Models")
install_from_swirl("Regression Models")
swirl()
fit <- lm("child ~ parent", galton)
fit <- lm(child ~ parent, galton)
sqr(sum((fit$residuals)^2)/(n-2))
sqrt(sum((fit$residuals)^2)/(n-2))
sqrt(sum((fit$residuals)^2) / (n-2))
sqrt(sum(fit$residuals^2) / (n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fit)$r.squared
cor(galton$parent, galton$child)^2
ones <- rep(1,nrow(galton))
lm(child ~ ones + parent - 1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
View(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
apply(list(fit, fit2), coef)
lapply(list(fit, fit2), coef)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
f <- lm(x ~ y)
summary(f)
install_
install_packates "swirl"
install_packates swirl
install_packages swirl
install.packages swirl
instal.packages("swirl")
install.packages("swirl")
library("swirl")
ls()
rm(list=ls())
swirl()
5 + 7
x <- 5 +
7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
mydiv <- z / mysqrt
mydiv <- z / my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0,10, 100)
z * 2 + 1000
my_
my_div
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir
dir()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive=T)
dir.create(file.path("testdir2", "testdir3"), recursive=TRUE)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive=TRUE)
q()
installed.packages("knitr")
library("knitr")
install.packages(knitr)
library(knitr)
install.packages("knitr")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12,1975")
mdy("March 12, 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920/1-2")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()), seconds = second(now()))
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- ?with_tz(arrive, "Asia/Hong_Kong")
arrive
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive, tzone = attr(last_time, "tzone"))
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean = mean(size))
summarize(by_package, mean(size))
a <- vector("numeric", 5)
a
b <- vector ("character", 3)
b
c <- vector ("logical", 8)
c
d <- vector ("complex", 2)
d
class(d)
length(d)
length(c)
a <- NaN
a
class(a)
length(a)
attributes(c)
attributes(a)
y<- c(TRUE, 2)
y
y<- c(FALSE, 2)
y
class(y)
y <- c("a", TRUE)
y
class(y)
length(y)
y <- c(TRUE, 5L)
y
class(y)
y <- c(23, 5L)
class(y)
y
x <- 0:6
x
class(x)
as.numeric(x)
class(x)
x <-as.numeric(x)
class(x)
as.logical(x)
x<- as.logical(x)
class(x)
x
x <- 0:6
as.character(x)
class(x)
x<- as.character(x)
class(x)
f <- readLines("./rawdata/features.txt")
getwd()
setwd("C:/Users/Lenette/Documents/GettingData/CleanHumanActivityRecognition")
getwd()
f <- readLines("./rawdata/features.txt")
fnumcols
fnumcols <- length(f)
fnumcols
ff <-strsplit (f, " ")
features <- data.frame(sapply(ff, secondElement))
secondElement <- function(x){x[2]}
features <- data.frame(sapply(ff, secondElement))
str(features)
xtrainfile <- "./rawdata/train/X_train.txt"
file.info(xtrainfile)$size
?paste
xtrain <- past(readLines(xtrainfile), collapse="\n")
xtrain <- paste(readLines(xtrainfile), collapse="\n")
train <- strsplit(xtrain," +")
dim(train)
head(train)
length(train)
dim(train)
train[5]
class(train)
length(train[1])
train[1]
train[[1]]
train[[1]][1]
train[[1]][2]
train[[1]][3]
length(train[[1]])
length(train[[1]])/ fnumcols
tt <- train[[1]]
dim(tt)
head(tt)
l <- length(head(tt))
l
str(tt)
xtrainfile
xtrainfile <= "./rawdata/trainX_train.txt"
xtrainfile
xt <- tt[lapply(tt, length)>0]
head(xt)
length(tt[1])
length(tt[2])
xt <- tt[lapply(tt, is.numeric)>0]
head(xt)
is.numeric(tt[1])
is.numeric(tt[2])
is.numeric(tt[3])
tt[2]
as.numeric(tt[2])
as.numeric(tt[1])
tt2 <- as.numeric(tt)
head(tt2)
tt3 <- tt2[lapply(tt2, is.na) == "FALSE"]
head(tt3)
length
(tt3)
dim(tt3)
tail(tt3)
tt3[1]
tt3[2]
length(tt3)
length(tt3) / fnumcols
dim(tt3) <- c(length(tt3) / fnumcols, fnumcols)
xtrain <- data.frame(tt3)
str(xtrain)
fnumcols
source('~/GettingData/CleanHumanActivityRecognition/run_analysis.R')
getwed
getwd
getwd()
source('run_analysis.R')
source('run_analysis.R')
source('run_analysis.R')
source('run_analysis.R')
str(xtrain)
str(xtest)
dim(tt3) <- c(length(ts3)/fnumcols, fnumcols)
dim(tt3) <- c(length(tt3)/fnumcols, fnumcols)
xtrain <- data.frame(tt3)
str(xtest)
str(xtrain)
xall <- bind_rows(xtrain, xtest)
?bind_rows
?bindrows
library(dplyr)
xall <- bind_rows(xtrain, xtest)
dim(xall)
?bind_cols
names(xall) <- features[,1]
str(xall)
head(xall)
head(xall,n=1)
dim(xall)
xmeanstd <-  xall[, grep("(.*)mean(.*)|(.*)std(.*)")]
xmeanstd <-  xall[, grep("(.*)mean(.*)|(.*)std(.*)",colnames(xall))]
dim xmeanstd
dim(xmeanstd)
names(xmeanstd)
grep("(.*)[Aa]ct(.*)", features[,1], value=T)
head(features)
head(features,n=10)
grep("(.*)[Aa]ct(.*)", features, value=T)
names(features)
names(features) <- c("colname")
names(features)
grep("(.*)[Aa]ct(.*)", features$colname, value=T)
grep("(.*)[Aa](.*)", features$colname, value=T)
fnumcols
getwd
getwd()
source("run_analysis.R"")
)
""
source("run_analysis.R")
dim(xall)
str(xall)
names(xmeanstd)
source("run_analysis.R")
source("run_analysis.R")
dim(xall)
str(xall)
names(xmeanstd)
ytractfile <- "./rawdata/train/Y_train.txt"
ytr <- readLines(ytractfile)
dim(xtrain)
dim(ytr)
head(ytr)
dim(ytr[1])
length(ytr[1])
length(ytr[[1]])
ytr[[1]]
ytr[1]
ytr[[2]]
ytr[[20]]
ytr[[1000]]
ytr[[300]]
ytr[[400]]
class(ytr)
str(ytr)
ytractfile <- "./rawdata/train/Y_train.txt"
ytr <- readLines(ytractfile)
acttr0 <- as.integer(ytr)
str(acttr0)
ytr <- paste(readLines(ytractfile), collapse="\n")
ytr0 <- paste(readLines(ytractfile), collapse="\n")
ytr1 <- strsplit(xtr0, " +")
ytr1 <- strsplit(ytr0, " +")
dim (ytr1)
str (ytr1)
`?strsplit
`
>strsplit()
?strsplit
ytr1 <- strsplit(ytr0, c(" ","\n"))
str(ytr1)
